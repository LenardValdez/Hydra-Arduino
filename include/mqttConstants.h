#ifndef __MQTTCONSTANTS_H__
#define __MQTTCONSTANTS_H__

#include "header.h"
//this is autogenerated by SSClient python script
#include "certificates.h"

//Ethernet Variable for connecting
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 117);
IPAddress myDns(192, 168, 1, 4);
IPAddress gateway(192, 168, 1, 1);
IPAddress subnet(255, 255, 255, 0);

// MQTT broker host/IP and topic subscription
// const char* server = "192.168.1.65";
const char* server = "mqtts.hydr-a.local";
const char* topic_sensor_data = "hyd-1/sensor_data/";
const char* topic_probe_data = "hyd-1/probe_data/";
const char* command_new_crop = "hyd-1/commands/new_crop/";
const char* change_value_ph = "hyd-1/commands/change_value/ph_reading/";
const char* change_value_ec = "hyd-1/commands/change_value/ec_reading/";
const char* change_value_air_hum = "hyd-1/commands/change_value/air_humidity/";
const char* change_value_air_temp = "hyd-1/commands/change_value/air_temperature/";
const char* harvest_command = "hyd-1/commands/harvest/";
const char* connection = "hyd-1/connection/";
const char* manual_prime = "hyd-1/commands/manual_prime/";

//system self note
const char* pumps_primed = "hyd-1/self/pumps_primed/";
const char* EC_PH_time = "hyd-1/self/first_run/";

//Last will and testament of disconnected Pod
const char* LWAT = "disconnected";

//SSL section
// constant client and server/broker cert
const char my_cert[] = "-----BEGIN CERTIFICATE-----\n"
"MIIDdDCCAlwCFClW9VdCwzIf+YkXycmjKoCbxt7YMA0GCSqGSIb3DQEBCwUAMIGW\n"
"MQswCQYDVQQGEwJQSDEPMA0GA1UECAwGTWFuaWxhMQ8wDQYDVQQHDAZNYWthdGkx\n"
"HjAcBgNVBAoMFUNlcnRpZmljYXRlIEF1dGhvcml0eTEPMA0GA1UECwwGSFlELUNB\n"
"MQ8wDQYDVQQDDAZDQS1IWUQxIzAhBgkqhkiG9w0BCQEWFGxlbmFyZC5leGVAZ21h\n"
"aWwuY29tMB4XDTIxMDYzMDEyNDQyMFoXDTIyMDYyNTEyNDQyMFowVjEOMAwGA1UE\n"
"AwwFSFlELTExCzAJBgNVBAYTAlBIMQwwCgYDVQQIDANNS1QxEjAQBgNVBAcMCVBh\n"
"cmFuYXF1ZTEVMBMGA1UECgwMSFlEUkEtQ2xpZW50MIIBIjANBgkqhkiG9w0BAQEF\n"
"AAOCAQ8AMIIBCgKCAQEA5FLsiZ0qSRStLzbfD7mYt7d7dW93nzH78XhGc9QEFiau\n"
"ac39GPgbBHxnPUYRz5k//6XDJpxY65FCOhN17lyhBEt6rfnbNqPF8TT76aZlJgts\n"
"Kem4tMtMqAegQI3NQ6guR/FXZYPCtXY6PX/zWy9P/yoHIV1bvIs0QssUM/EhIn/+\n"
"TdY4LGHWyGPbnhuTfT4pC16Nd9tzW13iglYjSiL0xIJzrprZ0v5kx4p0XvsPvKQ+\n"
"hoBUzHLTthAx3wY6lPMkbsZEKPEvn3/YLcMKhY5eLTFitLOU9xExEtAtYsgqqpn/\n"
"b4Ob1DrfuXjoHJwkb+3ZZ7AxyV9canLdJyryevrc8wIDAQABMA0GCSqGSIb3DQEB\n"
"CwUAA4IBAQAjk2mG6o4e38DP+yDyZNRW+wnGlLws4UdVizYlqOg3W7rosZsgC5iF\n"
"6CEfi6HABosPimSvk/k9/DeBTI4eiVE9D+sjAJDkefEd/hMltPfoTC/DjyTJvRXe\n"
"dF1CQplGJPI2pHfRA5Kuic+CoI0RiHxLLXAcIgicNIn2MUbx3F7yBCKxlMmsjKPG\n"
"rZKX7E6SOp0Zyq7S/YK/YkOl2SqjULSNZnD6MJLDesXa0ndTj6+zfP7utMq2tJZQ\n"
"s/7elc2+6MvqRI8KsPYYj8D3/58n6gjYt1+dW0yKiZ970+ogCk7ZkWjAFv8YAVvq\n"
"JSZV9Elkx8V6Lg2mgryfMgKAyaVXNZJP\n"
"-----END CERTIFICATE-----\n";

const char my_key[] = "-----BEGIN RSA PRIVATE KEY-----\n"
"MIIEpQIBAAKCAQEA5FLsiZ0qSRStLzbfD7mYt7d7dW93nzH78XhGc9QEFiauac39\n"
"GPgbBHxnPUYRz5k//6XDJpxY65FCOhN17lyhBEt6rfnbNqPF8TT76aZlJgtsKem4\n"
"tMtMqAegQI3NQ6guR/FXZYPCtXY6PX/zWy9P/yoHIV1bvIs0QssUM/EhIn/+TdY4\n"
"LGHWyGPbnhuTfT4pC16Nd9tzW13iglYjSiL0xIJzrprZ0v5kx4p0XvsPvKQ+hoBU\n"
"zHLTthAx3wY6lPMkbsZEKPEvn3/YLcMKhY5eLTFitLOU9xExEtAtYsgqqpn/b4Ob\n"
"1DrfuXjoHJwkb+3ZZ7AxyV9canLdJyryevrc8wIDAQABAoIBAQCiDMDZAvUqHUS1\n"
"h+pVTNK5Qb6cINrz4BQC0+yc9NNZrWaIrax+9kimrGzRrlOh1hD4LvwNAVaTCuvI\n"
"MFu5K4EUfUW7COSvKRmqEoLg2DpeAClqrflsSAZGE/OHHZ2b8Ve3s/Dlmdit1hWL\n"
"5K4h/7h1T6zz30Dm1p3m8h+Kpg9wXbOxBYndpNbigCkKy9cSOLZhR/kaYq0IjP4F\n"
"cYXZzfEJpRU0U5BVtQrMa+YcQNTuNERj3xnsqKZfGHj4IX9EDkCvkT4yX0JH38Ye\n"
"aVyiMx3NwzQbAbb2/kZflRWDF54dPQ23jOMOipqlMGFLuiKYtdGzBUf/351d/+7n\n"
"xOhu3SqxAoGBAP/ifPkinLPoxCL6w1ycfhznTV2oPnDAY8F7HfTOudBNmw5KLbev\n"
"PeDwkxeT7WGMQ3qsJjioNmv4eGCZaESIZ34N8qUW7fgiwi+YFOI7D0DabFIVrF+u\n"
"vtmhltYD+NfgJ3hEgxLsL7K2+ayoKDfjV3661CQ9IEZFA4xDTybYcE/3AoGBAORt\n"
"QdQa+1hOqURnvtZi6hINSnIB/A01tV+XktIZsBSry0Gh4zqAzSNDbgI78MeFu+zm\n"
"HyqNNfL/Qj7K6h/6krDK0VJ18Os14rtL2zSAK5FsySvirk0cFkFlKa7EuLUdlIOC\n"
"m2JUGDO8hzAd3EXTavuOKlqufiFamseE1Rc/DBPlAoGBANcdWYC8F06r1Q+vDkOy\n"
"D9dOoFynDu8M3hAO540hqVYzl7G4rJxqBzQuKwo8Quip2SSsymkBCNdWCCT1cpGC\n"
"trZjFWSyVRYwal1Gle/mRJl5xmxvafz6U9lznfGHX1BkUeoqdqKWyjaM2nLK3xy0\n"
"055ng+Z/OL26URQ+lbELbcfbAoGAbXtcSL/h5fJVuJ6M3g4sqBhMrRX8a4xpcPah\n"
"/ScouM+aLMvdr+WZ7KPd7x4xij+z0Zh+KZPi3qOvaY8x5b/gXPHon8A9h06dbC2w\n"
"U5p2x02/odQUvIqQtCk7cDODX/NcgiewN9Gcg/eBR/OX5rOtHAKIlEv70hquAqDM\n"
"zUZ/kG0CgYEApjprQ8HFFqrYICh/SVIKPKC+XIH97XGztQha/1jkuMpDmR3DOCsq\n"
"YM5WPH1grVInv/S3ZEa4yhul0uFbpYokMmWAtcKG0T2EtioyFVtVQS+KJhq0mVAo\n"
"sFGDxhDmKsYCTmOgI69MJ8mqrBqW2IR7yenIB8P7/rrs+ZTE3mF7d+Y=\n"
"-----END RSA PRIVATE KEY-----\n";

SSLClientParameters mTLS = SSLClientParameters::fromPEM(my_cert, sizeof my_cert, my_key, sizeof my_key);

// Ethernet and MQTT related objects
EthernetClient ethClient;
SSLClient ethClientSSL(ethClient, TAs, (size_t)TAs_NUM, A5);
PubSubClient mqttClient(server, 8883, ethClientSSL);
#endif // __MQTTCONSTANTS_H__