#ifndef __MQTTCONSTANTS_H__
#define __MQTTCONSTANTS_H__

#include "header.h"
//this is autogenerated by SSClient python script
#include "certificates.h"

//Ethernet Variable for connecting
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 117);
IPAddress myDns(192, 168, 1, 4);
IPAddress gateway(192, 168, 1, 1);
IPAddress subnet(255, 255, 255, 0);

// MQTT broker host/IP and topic subscription
// const char* server = "192.168.1.65";
const char* server = "mqtts.HYDR-A.com";
const char* topic_sensor_data = "hyd-1/sensor_data/";
const char* topic_probe_data = "hyd-1/probe_data/";
const char* command_new_crop = "hyd-1/commands/new_crop/";
const char* change_value_ph = "hyd-1/commands/change_value/ph_reading/";
const char* change_value_ec = "hyd-1/commands/change_value/ec_reading/";
const char* change_value_air_hum = "hyd-1/commands/change_value/air_humidity/";
const char* change_value_air_temp = "hyd-1/commands/change_value/air_temperature/";
const char* harvest_command = "hyd-1/commands/harvest/";
const char* connection = "hyd-1/connection/";
const char* manual_prime = "hyd-1/commands/manual_prime/";

//system self note
const char* pumps_primed = "hyd-1/self/pumps_primed/";
const char* EC_PH_time = "hyd-1/self/first_run/";

//Last will and testament of disconnected Pod
const char* LWAT = "disconnected";

//SSL section
// constant client and server/broker cert
const char my_cert[] = "-----BEGIN CERTIFICATE-----\n"
"MIIDXjCCAkYCFFlAM8LJA0izNsXUw8U3bslp56fHMA0GCSqGSIb3DQEBCwUAMIGA\n"
"MQswCQYDVQQGEwJQSDEMMAoGA1UECAwDTU5MMQ0wCwYDVQQHDARQUVVFMRIwEAYD\n"
"VQQKDAlIWURSLUEuQ0ExDzANBgNVBAsMBkhZRC1DQTELMAkGA1UEAwwCQ0ExIjAg\n"
"BgkqhkiG9w0BCQEWE2lhbWxlbGUxN0BnbWFpbC5jb20wHhcNMjEwNjMwMDQzNTM4\n"
"WhcNMjIwNjI1MDQzNTM4WjBWMQ4wDAYDVQQDDAVIWUQtMTELMAkGA1UEBhMCUEgx\n"
"DDAKBgNVBAgMA01LVDESMBAGA1UEBwwJUGFyYW5hcXVlMRUwEwYDVQQKDAxIWURS\n"
"QS1DbGllbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC4Jeul/0s7\n"
"MgH7uxb9kUxSTwibgAgI7opl6jOH/au1u2iKTHf7VeidG06FFo/YRLp4GZux5JoF\n"
"2o1+0ZDgn1HNsYt1TG7aGCh89vTtW4NBlkN60AjY/S1M5C+u/4UsWv/8LOZXArcR\n"
"WY9Z6rqMzcGC2XJ+CgibH+Vn1k9AVYXcwqRX599ibodBwHzFTUp39E2f+eXkrjgI\n"
"4ih8eC4yXo613LKhgL0SLeRBBN8v55RqGBB4zsSiVr9VFH1kf4u5vJhcZjdjlAFy\n"
"1YSRq+VsnV5J4Oq4R4x+NASycH3eSvbjvMmaqCvPyafka/YhdsN38Aanbqtd88j3\n"
"LiOx73eQIq7XAgMBAAEwDQYJKoZIhvcNAQELBQADggEBAIoh/z/bHTm7rTqHYTm9\n"
"09QivTFYvrA+gjENuTlAJMRG0+6zhGWHhj0P1rBcj0g7H14pwpTKK/ZZLphAyM2A\n"
"rYIXaBv+VsZPtQ7N59uLE13fxFq8MCYjnG40r6z7JJ3zBp5C7aEMQvhfaHJu+BVA\n"
"hXhu0z3ybFB6ZRmC8kEV9gusrAeV8sBG0yECL56Oq4+QCkhiMd9jlqEufK7h1apd\n"
"pegs8ugKINjN2N9Q610kprZdGqAe5JyiT9hLxye326Cu1vI74dtk/Q/k41XHo9m0\n"
"cP8KLOzm7w/1swfMwyAbqQAHWGZzssKyb+8Di01/kyJutZ8V5HaEDGdODXHeqA+d\n"
"zbk=\n"
"-----END CERTIFICATE-----\n";

const char my_key[] = "-----BEGIN RSA PRIVATE KEY-----\n"
"MIIEowIBAAKCAQEAuCXrpf9LOzIB+7sW/ZFMUk8Im4AICO6KZeozh/2rtbtoikx3\n"
"+1XonRtOhRaP2ES6eBmbseSaBdqNftGQ4J9RzbGLdUxu2hgofPb07VuDQZZDetAI\n"
"2P0tTOQvrv+FLFr//CzmVwK3EVmPWeq6jM3BgtlyfgoImx/lZ9ZPQFWF3MKkV+ff\n"
"Ym6HQcB8xU1Kd/RNn/nl5K44COIofHguMl6OtdyyoYC9Ei3kQQTfL+eUahgQeM7E\n"
"ola/VRR9ZH+LubyYXGY3Y5QBctWEkavlbJ1eSeDquEeMfjQEsnB93kr247zJmqgr\n"
"z8mn5Gv2IXbDd/AGp26rXfPI9y4jse93kCKu1wIDAQABAoIBAE8Q4RQeAERDXXyj\n"
"QOTQvQ9eJdj2aPzExyGpJEUQkuhtth4jZSTCJyVFszoLjOmT4OhuPl5sRAGdbEF2\n"
"Y5k+btY9lB5iGfqEguXc9x7uuvWvOfwCVLouQoQQObUOuzRnQiAZezEC1m2ZoaY+\n"
"1ahdM+glyzX4wucwE8S4zMBXuCknov5yyl06c1UKtYNhZIkNv593NzlHV1xu+DCQ\n"
"gJ4x/E6+5yoVIQ0N4HrUjKRrvQytZ/JpXHWAmM++Bp4F0VR5WIo9yRZU57SiXXyE\n"
"7hGkKDvZ+t5TVLjIS18fnCs1TkRrZkRQi62F0nyhc+8YYpXO6IQLdE8urxpQ6dGR\n"
"7Ln7lgECgYEA3kAkSV1FRsEHGAOyyGMO9QUZ5fcyKXZRAoL1E5v8GYKQqCVgohlI\n"
"KvexZH/QBds7CnWRNwc2TrNyAihzBDFpmQFB7BXbC/IZG1p4NS3qXUFF98t7Zw7P\n"
"5I7j/SZrQjFC+kbkQHfuePVt80zbAM6IRjrKFvktZpaqkWx/pJZpSdcCgYEA1ByR\n"
"zh3KT/uNQXAuF3iFqyojSgF1PvvAYxHlkQh21QK49+z6yRBluTUMDIiDeoDB/2Z5\n"
"rACqYqwk3cMb/gb+jXTnSod728my5x6iZJeniHGQPAEFEfAPRRurn5RMLF7oTeD0\n"
"QWN4KfigkpZXRp89GUXcFNs8bvDgQegranZHIwECgYBMnHGltHgP5rQKTCQRvUvH\n"
"nEWMJwTsk/Ni2T+fzdI9/Oree1vvJKXi4dUNXp2XlzWn6lTvUhYfVO4E3mqfVGUh\n"
"L/TIa9RBLugGrM3pDvXNxZVX0JWuNcXl9HeUqOyqOY7r9QnzSyQyH/ARwTlw8sC4\n"
"7MUC3EwRI/iR/oOVeZ+7qwKBgDApoI3dw89vff6K21xm+GsKMWMfe6DmhyO3r5nE\n"
"Az+Q07Ev9S3sdDyep/K8mKYbUHGOsjf1Grs2/VQBdnyy1+AE2HPa2avpW58RHKyc\n"
"puTbbHXDgYQ2LzFw/AJLKRS2JCdy2eNzE5jsJIHEc2LMy5HOhA+UTF+ggDtW3Wza\n"
"GIMBAoGBAL92AO5wSB3OcpHN8b6qyPik0jDhNNxH8NPzy3lFW88D/uoj2Dr7BPzm\n"
"0K4cdwC/+nzcTGB7uqXO+2cv/BaJ/0Y5GsPJQrJJ5984ADhuWB34FZy5XisH56Vq\n"
"aevRDWPm9nsMQxVjcEyxn2k7Vf/M1OVSPUq1A7E4AT8FU5V6vCWc\n"
"-----END RSA PRIVATE KEY-----\n";

SSLClientParameters mTLS = SSLClientParameters::fromPEM(my_cert, sizeof my_cert, my_key, sizeof my_key);

// Ethernet and MQTT related objects
EthernetClient ethClient;
SSLClient ethClientSSL(ethClient, TAs, (size_t)TAs_NUM, A5);
PubSubClient mqttClient(server, 8883, ethClientSSL);
#endif // __MQTTCONSTANTS_H__