#ifndef __MQTTCONSTANTS_H__
#define __MQTTCONSTANTS_H__

#include "header.h"
//this is autogenerated by SSClient python script
#include "certificates.h"

//Ethernet Variable for connecting
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 117);
IPAddress myDns(192, 168, 1, 4);
IPAddress gateway(192, 168, 1, 1);
IPAddress subnet(255, 255, 255, 0);

// MQTT broker host/IP and topic subscription
// const char* server = "192.168.1.65";
const char* server = "mqtts.hydr-a.local";
const char* topic_sensor_data = "hyd-1/sensor_data/";
const char* topic_probe_data = "hyd-1/probe_data/";
const char* command_new_crop = "hyd-1/commands/new_crop/";
const char* change_value_ph = "hyd-1/commands/change_value/ph_reading/";
const char* change_value_ec = "hyd-1/commands/change_value/ec_reading/";
const char* change_value_air_hum = "hyd-1/commands/change_value/air_humidity/";
const char* change_value_air_temp = "hyd-1/commands/change_value/air_temperature/";
const char* harvest_command = "hyd-1/commands/harvest/";
const char* connection = "hyd-1/connection/";
const char* manual_prime = "hyd-1/commands/manual_prime/";

//system self note
const char* pumps_primed = "hyd-1/self/pumps_primed/";
const char* EC_PH_time = "hyd-1/self/first_run/";

//Last will and testament of disconnected Pod
const char* LWAT = "disconnected";

//SSL section
// constant client and server/broker cert
const char my_cert[] = "-----BEGIN CERTIFICATE-----\n"
"MIIDdDCCAlwCFClW9VdCwzIf+YkXycmjKoCbxt7fMA0GCSqGSIb3DQEBCwUAMIGW\n"
"MQswCQYDVQQGEwJQSDEPMA0GA1UECAwGTWFuaWxhMQ8wDQYDVQQHDAZNYWthdGkx\n"
"HjAcBgNVBAoMFUNlcnRpZmljYXRlIEF1dGhvcml0eTEPMA0GA1UECwwGSFlELUNB\n"
"MQ8wDQYDVQQDDAZDQS1IWUQxIzAhBgkqhkiG9w0BCQEWFGxlbmFyZC5leGVAZ21h\n"
"aWwuY29tMB4XDTIxMDcwOTA4MDIzMVoXDTIyMDcwNDA4MDIzMVowVjEOMAwGA1UE\n"
"AwwFSFlELTExCzAJBgNVBAYTAlBIMQwwCgYDVQQIDANNS1QxEjAQBgNVBAcMCVBh\n"
"cmFuYXF1ZTEVMBMGA1UECgwMSFlEUkEtQ2xpZW50MIIBIjANBgkqhkiG9w0BAQEF\n"
"AAOCAQ8AMIIBCgKCAQEA7vw3Ow7KMmZGsH8iJ7O+cweTnrypNKitMWoLauPa50rs\n"
"T53zIEIZKmPxodlWn+onZNugDSgQcNWvONPkEr52NGoVjX/hrz4QtvrITh8bszn0\n"
"X9vMMuFE1aKeoB7GtjW9/4kaWWyNr4XNffnjsOow07eXdvS6cuuf36AV82+mkSa/\n"
"4Cyo4kfNzd1jIMNH9bbPbvrRUUBILb4R7ABMdakLwZ2OhQ/pw/r0HcFB5jWExVPk\n"
"VV7WWeQp5QS08hw5NQG2NScDgyMaPJJcTYZx78yAh2MPmW/PSC2flw0pDhYD/g3n\n"
"TGKsD+yO1xoNjZeXv4oPzXV9qvrV1ZcntD2MiD/4PQIDAQABMA0GCSqGSIb3DQEB\n"
"CwUAA4IBAQCaSunDtPFdIBCRdd9IAfq2RhuglpY9VnGya747oDmuOEB0DY+b0aip\n"
"deJxIlk4kirt7eJkrT0m342ZZi8I1cc/gJwZ2euvIKLcsdquXeXJg9PaJPslT2WK\n"
"GQTSTloMQ4Apo7fVvv4OvwUam6uZy9QtTkrItgIKZuNH+rIP6x5HN9wGx40/98Fj\n"
"XS2wdCc3M0H5c9hGGrU7G1vVH3miLuw0+0lXXrb/B/TS6d5JfB0SzSssR4N4gAEx\n"
"+jrm/QgEIP14GoP6i3H+L7uBl07CYntwqq5qn4CdjLOj+tXSF7cv52C/z6bo4npZ\n"
"tp3P9T7iZY6zctsIUJaWYpd2QkzUiRXm\n"
"-----END CERTIFICATE-----\n";

const char my_key[] = "-----BEGIN RSA PRIVATE KEY-----\n"
"MIIEowIBAAKCAQEA7vw3Ow7KMmZGsH8iJ7O+cweTnrypNKitMWoLauPa50rsT53z\n"
"IEIZKmPxodlWn+onZNugDSgQcNWvONPkEr52NGoVjX/hrz4QtvrITh8bszn0X9vM\n"
"MuFE1aKeoB7GtjW9/4kaWWyNr4XNffnjsOow07eXdvS6cuuf36AV82+mkSa/4Cyo\n"
"4kfNzd1jIMNH9bbPbvrRUUBILb4R7ABMdakLwZ2OhQ/pw/r0HcFB5jWExVPkVV7W\n"
"WeQp5QS08hw5NQG2NScDgyMaPJJcTYZx78yAh2MPmW/PSC2flw0pDhYD/g3nTGKs\n"
"D+yO1xoNjZeXv4oPzXV9qvrV1ZcntD2MiD/4PQIDAQABAoIBAA7dCOJXbSPtUIAx\n"
"qAIoH7QvyHKa8TshMoRcQBGJ0leIRWI+RJzA/6evR5v1VHnlqkWPk0i+MSeTYq56\n"
"Hzk7N0bTQjvmtDad+ZQnzMVvEd33wMcleHHBqPJQhuUWhO1YMlTuRgFByx4biEhJ\n"
"fmvGZPsF9Bml5uK23N6fqj3Vt9pXG9c8HyD/nf3fbG1lN6pmc7IvLIfb/DIZbwOs\n"
"s1QCthYe7NgdtUq00T/PlSDkrmV/8ChDG7pN0Qg3fPJK/ekP48hwU4qrtGd+eeto\n"
"D42/SEofbyTVpKDGIagKz6W48wPVpXR2fKhs2hifKe8/UtPssMGAied/QXrx2Xjw\n"
"5carkoECgYEA/5knYZ5N74H9WOIDdkDJDbJu9z48ZX4tC48vIXJjB9Jhdiuo3FBV\n"
"3YGiTkG7x8TdWO/SfLewmj5VhT9UHxJAfTmzbdqQHAI1xD2n9DQxBC98YmTdEXlg\n"
"EU7e/3/4ebUyM71JXrzvTq3s7I/NUeyKlYYH808GWRY94q63ypHQszkCgYEA71xg\n"
"k5FuwI7dIc8Z8WKlBUbKvT5x61kKzMMVkHa1rfZ07/ZCSPdoCwOS9Z9WXCR+On01\n"
"rXRhk8tUq/GXmkILiFlnRpXHjrvQUhpL1w5VhEtbat1ZHmDX9GUKwkR373rPj8CY\n"
"GeQafFzZj6GCy0XWvHcUZGv17uraX7pBwXzBmSUCgYEAsO0eAoenIRRU/5KrnM6p\n"
"nW6XO1P8ULDvk2HQ2REqFb7+MeN05tRBK6xRYmREDLtsEOUpSaWJfKuLXUoB++QR\n"
"ed1YI8G4IXsyJp4bRYJfL6uDKUTydecTpcd3u1qk7/KKRqBPSmH0MP1Z1EKSeJQJ\n"
"NglqNXTNSxuHSQNyO6mF0pkCgYAi1txLvlhTeLfhCuboxoXkbbhmsScdrVkwEpkZ\n"
"7N1m07+TidF+E1y2da+3RpjoUnt5Ae6FL7JgM7FAUarSThiloPWyRWzFbrrUqHUv\n"
"eSujVOCafltRW6EzNl3JhvO6DLMXZl39LsFYJp+YE1cZRTILPn3eXARw4Qgl9NNL\n"
"WWBIbQKBgFBoq2nWJF/vkIwvJgu0zxcAOSJoynwExzPNecW16z9Zuh8hWdYVbPoR\n"
"DYc1+4xFDhk46LwEImfh2n/D1xiAD7C0r2XpNq+tyftg0Zpo0hGzeXozpfCk9pJy\n"
"eU92Re7Jb+fD6c8ivKEOJrywr0vYOuCPGMccj4Kz7QwXQyDZTVD1\n"
"-----END RSA PRIVATE KEY-----\n";

SSLClientParameters mTLS = SSLClientParameters::fromPEM(my_cert, sizeof my_cert, my_key, sizeof my_key);

// Ethernet and MQTT related objects
EthernetClient ethClient;
SSLClient ethClientSSL(ethClient, TAs, (size_t)TAs_NUM, A5);
PubSubClient mqttClient(server, 8883, ethClientSSL);
#endif // __MQTTCONSTANTS_H__